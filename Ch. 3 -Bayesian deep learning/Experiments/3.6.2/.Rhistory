david.sample = impute(david.sample,object=values_to_impute,method='median')
sum(is.na(david.sample$HLE))
david.data = read.csv('happiness2017.csv')
attach(david.data)
head(david.sample)
david.sample=sample_n(david.data, n_countries)
length(david.sample[,1])
head(david.sample)
david.sample
values_to_impute = compute(david.sample)
david.sample = impute(david.sample,object=values_to_impute,method='median')
david.sample
david.data = read.csv('happiness2017.csv')
attach(david.data)
david.sample=sample_n(david.data, n_countries)
length(david.sample[,1])
head(david.sample)
sum(is.na(david.sample$Corruption))
values_to_impute = compute(david.sample)
david.sample = impute(david.sample,object=values_to_impute,method='median')
sum(is.na(david.sample$Corruption))
hle
names(david.sample)
summary(HLE)
david.sample = impute(david.sample,object=values_to_impute,method='median')
names(david.sample)
summary(HLE)
summary(corruption)
summary(Corruption)
attach(david.sample)
names(david.sample)
summary(Corruption)
summary(HLE)
plot(density(HLE))
library("car")
scatterplotMatrix(david.sample)
scatterplotMatrix(david.sample[1:5])
scatterplotMatrix(david.sample[1:4])
scatterplotMatrix(david.sample[2:5])
scatterplotMatrix(david.sample[2:5])
scatterplotMatrix(david.sample[2:5])
scatterplotMatrix(david.sample[2:5], col='red')
scatterplotMatrix(david.sample[2:5], col='green')
scatterplotMatrix(david.sample[2:5], col='red')
david.sample[,c(1,2,3,4)]
head(david.sample[,c(1,2,3,4)])
head(david.sample[,c(1,2,3,4,5,6,7,8,9)])
head(david.sample[,c(1,2,3,4,5,6,7,8,9,10)])
head(david.sample[,c(1,2,3,4,5,6,7,8,9,10,11)])
head(david.sample[,c(1,2,3,4,5,6,7,8,9,10,11,12)])
head(david.sample[,c(1,2,3,4,5,6,7,8,9,10,11)])
head(david.sample[,c(5,2,3,4,1,6,7,8,9,10,11)])
head(david.sample[,c(1,5,3,4,2,6,7,8,9,10,11)])
david.sample=david.sample[,c(1,5,3,4,2,6,7,8,9,10,11)]
library("car")
scatterplotMatrix(david.sample[2:5], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[6:10], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[6:10], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[7:11], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[7:11], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[7:11], col='red')
names(david.sample)
david.sample=david.sample[,c(1,2,3,4,5,6,7,8,9,10,11)]
names(david.sample)
#NAME GOES HERE
#loading in the data file
david.data = read.csv('happiness2017.csv')
attach(david.data)
#take a random sample of n_countries:
n_countries = 100
set.seed(1671)
library("dplyr")
david.sample=sample_n(david.data, n_countries)
#verify there are 100 rows:
length(david.sample[,1])
head(david.sample)
#check number of NA's (missing values) for corruption column
sum(is.na(david.sample$Corruption)) #8 missing values
#impute missing values with median
install.packages("imputeMissings")
library("imputeMissings")
values_to_impute = compute(david.sample)
david.sample = impute(david.sample,object=values_to_impute,method='median')
sum(is.na(david.sample$Corruption)) #0 missing values now. Imputation worked.
#replace old variable names in memory with the ones that have imputed values:
attach(david.sample)
#plots and exploration of data
names(david.sample)
install.packages("imputeMissings")
names(david.sample)
names(david.sample)
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[7:11], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[7:11], col='red')
scatterplotMatrix(david.sample[2:6], col='red')
scatterplotMatrix(david.sample[2,], col='red')
scatterplotMatrix(david.sample[2], col='red')
scatterplotMatrix(david.sample[2:11], col='red')
Corruption
plot(density(Corruption))
plot(density(log(Corruption)))
plot(density(exp(Corruption)))
plot(density(Corruption)) # skewed left
plot(density(exp(Corruption)))
plot(density(sqrt(Corruption)))
plot(density(Corruption)) # skewed left
plot(density(sqrt(Corruption)))
plot(density(exp(Corruption)))
plot(density(Generosity)) # skewed left
plot(density(log(Generosity)))
plot(density(exp(Generosity)))
plot(density(Generosity)) # skewed right
plot(density(Corruption)) # skewed left
plot(density(exp(Corruption)))
plot(density(Corruption)) # skewed left
plot(density(exp(Corruption)))
plot(density((Corruption)^2))
plot(density(Corruption)) # skewed left
plot(density((Corruption)^2))
plot(Ladder, Corruption)
plot(Corruption, Ladder)
plot(Corruption^2, Ladder)
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(density(Generosity)) # skewed right
plot(density((Generosity)))
plot(density(Generosity)) # skewed right
plot(density(log(Generosity)))
plot(density((Generosity)^(1/3)))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
par(mfrow=c(2,2))
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(gini, Ladder)
plot(gini, Ladder)
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(density(Corruption)) # skewed left,
plot(density((Corruption)^2))
plot(Corruption^2, Ladder)
plot(Corruption, Ladder)
plot(Corruption, Ladder)
plot(density(Corruption)) # skewed left,
plot(density((Corruption)^2))
plot(Corruption^2, Ladder)
par(mfrow=c(2,2))
plot(gini, Ladder)
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
par(mfrow=c(1,1))
names(david.sample)
model = Ladder ~ LogGDP + Social + HLE + Freedom + Generosity + Corruption + Positive + Negative + gini
lm(model)
logCorruption = log(Corruption)
quadraticCorruption = Corruption^2
model = Ladder ~ LogGDP + Social + HLE + Freedom + Generosity + quadraticCorruption + Positive + Negative + gini
logGini = log(gini)
model = Ladder ~ LogGDP + Social + HLE + Freedom + Generosity + quadraticCorruption + Positive + Negative + logGini
lm(model)
residuals = model$residuals
lm(model)
residuals = model$residuals
mlr=lm(model)
residuals = mlr$residuals
plot(density(residuals))
ppnorm(residuals)
qqnorm(residuals)
summary(mlr)
residuals = mlr$residuals
plot(density(residuals))
qqnorm(residuals)
standardized_data = scale(david.sample)
head(david.sample)
standardized_data = scale(david.sample[2:11])
standardized_data = scale(david.sample[2:12])
standardized_data = scale(david.sample[2:11])
david.pca = prcomp(standardized_data)
summary(david.pca)
screeplot(david.pca, type='lines')
sum((david.pca$sdev)^2))
sum((david.pca$sdev)^2)
(david.pca$sdev)^2
david.pca$rotation[,1]
david.pca$rotation[,2]
david.pca$rotation[,2]
david.pca$rotation[,1]
standardized_data = scale(david.sample[3:11]) #all except country column and ladder
david.pca = prcomp(standardized_data)
summary(david.pca)
screeplot(david.pca, type='lines')
standardized_data = scale(david.sample[3:11]) #all except country column and ladder
david.pca = prcomp(standardized_data)
summary(david.pca)
screeplot(david.pca, type='lines')
sum((david.pca$sdev)^2)
(david.pca$sdev)^2
david.pca$rotation[,1]
summary(david.pca)
pca3 = david.pca$x[,1:3]
pca3
lm(Ladder~pca3)
summary(lm(Ladder~pca3))
#loading in the data file
david.data = read.csv('happiness2017.csv')
attach(david.data)
#take a random sample of n_countries:
n_countries = 100
set.seed(1671)
library("dplyr")
david.sample=sample_n(david.data, n_countries)
#verify there are 100 rows:
length(david.sample[,1])
head(david.sample)
#check number of NA's (missing values) for corruption column
sum(is.na(david.sample$Corruption)) #8 missing values
#impute missing values with median
#install.packages("imputeMissings")
library("imputeMissings")
values_to_impute = compute(david.sample)
david.sample = impute(david.sample,object=values_to_impute,method='median')
sum(is.na(david.sample$Corruption)) #0 missing values now. Imputation worked.
#replace old variable names in memory with the ones that have imputed values:
attach(david.sample)
#plots and exploration of data
names(david.sample)
library("car")
#scatterplot matrix
scatterplotMatrix(david.sample[2:11], col='red')
scatterplotMatrix(david.sample[2:11], col='red', main="s")
scatterplotMatrix(david.sample[2:11], col='red', main="Scatterplot Matrix, 1671")
scatterplotMatrix(david.sample[2:11], col='red', main="Scatterplot Matrix, 1671")
residuals = mlr$residuals
plot(density(residuals))
qqnorm(residuals)
summary(mlr)
qqnorm(residuals, main="Normal Q-Q Plot 1671")
qqnorm(residuals, main="Normal Q-Q Plot, 1671")
screeplot(david.pca, type='lines')
screeplot(david.pca, type='lines', main = "Screeplot, 1671")
par(mfrow=c(2,2))
plot(gini, Ladder)
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(gini, Ladder, main="Residuals, 1671")
par(mfrow=c(2,2))
plot(gini, Ladder, main="Residuals, 1671")
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(Corruption, Ladder)
plot(density(Corruption)) # skewed left,
plot(density((Corruption)^2))
plot(Corruption^2, Ladder)
plot(Corruption, Ladder, main= "Residuals, 1671")
plot(density(Corruption)) # skewed left,
plot(density((Corruption)^2))
plot(Corruption^2, Ladder)
par(mfrow=c(2,2))
plot(gini, Ladder, main="Residuals, 1671")
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
plot(density(residuals))
par(mfrow=c(1,1))
plot(density(residuals), main="Density of residuals, 1671")
#loading in the data file
david.data = read.csv('happiness2017.csv')
attach(david.data)
#take a random sample of n_countries:
n_countries = 100
set.seed(1671)
library("dplyr")
david.sample=sample_n(david.data, n_countries)
library("imputeMissings")
values_to_impute = compute(david.sample)
david.sample = impute(david.sample,object=values_to_impute,method='median')
sum(is.na(david.sample$Corruption)) #0 missing values now. Imputation worked.
#replace old variable names in memory with the ones that have imputed values:
attach(david.sample)
#plots and exploration of data
names(david.sample)
library("car")
#scatterplot matrix
scatterplotMatrix(david.sample[2:11], col='red', main="Scatterplot Matrix, 1671")
# generosity, corruption, and gini may need transformations
plot(Corruption, Ladder, main= "Residuals, 1671")
plot(density(Corruption)) # skewed left,
plot(density((Corruption)^2))
plot(Corruption^2, Ladder)
par(mfrow=c(2,2))
plot(gini, Ladder, main="Residuals, 1671")
plot(density(gini))
plot(density(log(gini)))
plot(log(gini), Ladder)
names(david.sample)
#disregard country
quadraticCorruption = Corruption^2
logGini = log(gini)
model = Ladder ~ LogGDP + Social + HLE + Freedom + Generosity + quadraticCorruption + Positive + Negative + logGini
mlr=lm(model)
summary(mlr)
Country
country
countries_sampled = countries
david.data = read.csv('happiness2017.csv')
attach(david.data)
#take a random sample of n_countries:
n_countries = 100
set.seed(1671)
library("dplyr")
david.sample=sample_n(david.data, n_countries)
countries_sampled = countries
countries_sampled = country
countries_sampled
countries_sampled = david.sample$country
countries_sampled
male_max_vol = c(23, 36, 56, 42, 28, 31, 62, 19, 21, 25,
38, 36, 22, 51, 69, 25, 33, 38, 29, 25,
22, 24, 37, 44, 42, 33, 31, 38, 36, 39)
female_max_vol = c(18, 36, 23, 45, 61, 19, 21, 23, 33, 36,
45, 36, 38, 44, 49, 52, 53, 48, 23, 16,
33, 39, 25, 29, 29, 41, 60, 33, 39, 20)
all_max_vol = male_max_vol + female_max_vol
all_max_vol = c(male_max_vol, female_max_vol)
all_max_vol
mean(male_max_vol)
median(male_max_vol)
mode(male_max_vol)
getmode(male_max_vol)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
getmode(male_max_vol)
sd(male_max_vol)
mean(female_max_vol)
median(female_max_vol)
getmode(female_max_vol)
sd(female_max_vol)
#for men:
mean(male_max_vol)
median(male_max_vol)
getmode(male_max_vol)
sd(male_max_vol)
#for women
mean(female_max_vol)
median(female_max_vol)
getmode(female_max_vol)
sd(female_max_vol)
#for both
mean(all_max_vol)
median(all_max_vol)
getmode(all_max_vol)
sd(all_max_vol)
# Examining a relationship between the performance metrics and the Occam factor
# of a Bayesian LeNet-5.
directory = "C:/Users/John/Desktop/Thesis/Ch. 3 -Bayesian deep learning/Experiments/3.2/"
setwd(directory)
results = read.csv('result_dataframe.csv', header = TRUE)
#install.packages("corrplot")
library(corrplot)
attach(results)
names(results)
results = results[-c(1)] #exclude model number
File <- "./img/corr_matrix.png"
png(File)
dir.create(dirname(File), showWarnings = FALSE)
cor_matrix = cor(results)
cor_matrix
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method="number")
dev.off()
File <- "./img/corr_matrix_numbers.png"
png(File)
dir.create(dirname(File), showWarnings = FALSE)
cor_matrix = cor(results)
cor_matrix
corrplot(cor_matrix, method="number")
dev.off()
#scatter plots... to check if any relationships are NOT linear:
File <- "./img/avg_aleatoric_vs_avg_epistemic.png"
png(File)
plot(Avg..Aleatoric, Avg..Epistemic, main="Avg. Aleatoric vs. Avg. Epistemic",
xlab="Avg. Aleatoric ", ylab="Avg. Epistemic", pch=19)
dev.off()
File <- "./img/FC_occam_vs_avg_epistemic.png"
png(File)
plot(Occam.factor..FC., Avg..Epistemic, main="FC Occam Factor vs. Avg. Epistemic",
xlab="Occam Factor based on FC weight", ylab="Avg. Epistemic", pch=19)
dev.off()
File <- "./img/FC_occam_vs_avg_aleatoric.png"
png(File)
plot(Occam.factor..FC., Avg..Aleatoric, main="FC Occam Factor vs. Avg. Aleatoric",
xlab="Occam Factor based on FC weight", ylab="Avg. Aleatoric", pch=19)
dev.off()
File <- "./img/FC_occam_vs_test_accuracy.png"
png(File)
plot(Occam.factor..FC., Test.Accuracy, main="FC Occam Factor vs. Test Accuracy",
xlab="Occam Factor based on FC weight ", ylab="Test Accuracy", pch=19)
dev.off()
File <- "./img/Filter_occam_vs_test_accuracy.png"
png(File)
plot(Occam.factor..Filter., Test.Accuracy, main="Filter Occam Factor vs. Test Accuracy",
xlab="Occam Factor based on Filter weight ", ylab="Test Accuracy", pch=19)
dev.off()
File <- "./img/Filter_occam_vs_FC_occam.png"
png(File)
plot(Occam.factor..Filter., Occam.factor..FC., main="Filter Occam Factor vs. Occam Factor based on FC weight",
xlab="Occam Factor based on filter weight ", ylab="Occam Factor based on FC weight", pch=19)
dev.off()
#File <- "./img/FC_occam_vs_test_accuracy.png"
#png(File)
#plot(Occam.factor..FC., Test.Accuracy, main="FC Occam Factor vs. Test Accuracy",
#     xlab="Occam Factor based on FC weight ", ylab="Test Accuracy", pch=19)
#dev.off()
#Finish writing all scatterplots!
results
names(results)
results_reduced = results[-c(2, 7)]
head(results_reduced)
pairs(results_reduced, pch=19)
pairs(results, pch=19)
pairs(results_reduced, pch=19)
File <- "./img/corr_matrix.png"
png(File)
dir.create(dirname(File), showWarnings = FALSE)
cor_matrix = cor(results)
cor_matrix
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method="number")
dev.off()
File <- "./img/corr_matrix.png"
png(File)
dir.create(dirname(File), showWarnings = FALSE)
cor_matrix = cor(results)
cor_matrix
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix, method="number")
dev.off()
File <- "./img/corr_matrix.png"
png(File)
dir.create(dirname(File), showWarnings = FALSE)
cor_matrix = cor(results)
cor_matrix
corrplot(cor_matrix, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
corrplot(cor_matrix)
dev.off()
head(results_reduced, lower.panel = NULL)
pairs(results_reduced, pch=19, lower.panel = NULL)
pairs(results, pch=19, lower.panel = NULL)
pairs(results_reduced, pch=1, lower.panel = NULL)
pairs(results_reduced, pch=2, lower.panel = NULL)
pairs(results_reduced, pch=3, lower.panel = NULL)
pairs(results_reduced, pch=4, lower.panel = NULL)
pairs(results_reduced, pch=5, lower.panel = NULL)
pairs(results_reduced, pch=6, lower.panel = NULL)
pairs(results_reduced, pch=1, lower.panel = NULL)
pairs(results_reduced, pch=18, lower.panel = NULL)
pairs(results_reduced, pch=17, lower.panel = NULL)
pairs(results_reduced, pch=15, lower.panel = NULL)
pairs(results_reduced, pch=20, lower.panel = NULL)
#this way we can view the image...
File <- "./img/scatter_matrix.png"
png(File)
pairs(results_reduced, pch=20, lower.panel = NULL)
dev.off(
)
iables. Don't include... too large to view.
File <- "./img/full_scatter_matrix.png"
png(File)
pairs(results, pch=20, lower.panel = NULL)
dev.off()
names(results)
plot(Occam.factor..Filter., Generalization.Gap, main="Filter Occam Factor vs. Occam Factor based on FC weight",
xlab="Occam Factor based on filter weight ", ylab="Occam Factor based on FC weight", pch=19)
plot(Occam.factor..Filter., Generalization.Gap, main="Filter Occam Factor vs. Occam Factor based on FC weight",
xlab="Occam Factor based on filter weight ", ylab="Generalization Gap", pch=19)
plot(Occam.factor..Filter., Generalization.Gap, main="Filter Occam Factor vs. Generalization Gap",
xlab="Occam Factor based on filter weight ", ylab="Generalization Gap", pch=19)
plot(Occam.factor..Filter., Generalization.Gap, main="FC Occam Factor vs. Generalization Gap",
xlab="Occam Factor based on FC weight ", ylab="Generalization Gap", pch=19)
plot(Occam.factor..FC., Generalization.Gap, main="FC Occam Factor vs. Generalization Gap",
xlab="Occam Factor based on FC weight ", ylab="Generalization Gap", pch=19)
File <- "./img/Filter_occam_vs_GG.png"
png(File)
plot(Occam.factor..Filter., Generalization.Gap, main="Filter Occam Factor vs. Generalization Gap",
xlab="Occam Factor based on filter weight ", ylab="Generalization Gap", pch=19)
dev.off()
File <- "./img/FC_occam_vs_GG.png"
png(File)
plot(Occam.factor..FC., Generalization.Gap, main="FC Occam Factor vs. Generalization Gap",
xlab="Occam Factor based on FC weight ", ylab="Generalization Gap", pch=19)
dev.off()
